# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.


# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: P2.2
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !P2.6
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !P2.1
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
step_distance: .0125
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
endstop_pin: P1.29
#   Endstop switch detection pin. This parameter must be provided for
#   the X, Y, and Z steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 235
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#homing_speed: 100
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: P0.19
dir_pin: !P0.20
enable_pin: !P2.8
step_distance: .0125
endstop_pin: P1.27
position_endstop: 0
position_max: 235
homing_speed: 100

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: P0.22
dir_pin: P2.11
enable_pin: !P0.21
step_distance: .0025
position_min: -5
position_max: 250
endstop_pin: probe:z_virtual_endstop

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
step_distance: .0095839875
nozzle_diameter: 0.600
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.750
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
#instantaneous_corner_velocity: 1.000
#   The maximum instantaneous velocity change (in mm/s) of the
#   extruder during the junction of two moves. The default is 1mm/s.
max_extrude_only_distance: 100
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not have any impact on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
#pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
#pressure_advance_smooth_time: 0.040
#   A time range (in seconds) to use when calculating the average
#   extruder velocity for pressure advance. A larger value results in
#   smoother extruder movements. This parameter may not exceed 200ms.
#   This setting only applies if pressure_advance is non-zero. The
#   default is 0.040 (40 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: P2.7
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: EPCOS 100K B57560G104F
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", and "NTC 100K MGB18-104F39050L32". See the
#   example-extras.cfg file for other sensors. This parameter must be
#   provided.
sensor_pin: P0.24
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 4700 ohms.
#inline_resistor: 0
#   The resistance (in ohms) of an extra (not heat varying) resistor
#   that is placed inline with the thermistor. It is rare to set this.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 0 ohms.
#smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
#control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
#pid_Kp: 23.975
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Ki: 0.951
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
#pid_Kd: 151.044
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
#min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 260
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an
#   error. These parameters must be provided.

# Ender 2 stock heater fan wires into the second extruder heater output marked 'HE1'
[heater_fan e0_fan]
pin: P2.4
heater: extruder
heater_temp: 50.0
fan_speed: 1.0

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.23
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
min_temp: 0
max_temp: 130

# Print cooling fan (omit section if fan not present).
[fan]
pin: P2.3
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan spinning).
#   The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.

# Micro-controller information.
[mcu]
serial: /dev/ttyACM0
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
#baud: 250000
#   The baud rate to use. The default is 250000.
pin_map: arduino
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.

# The printer section controls high level printer settings.
[printer]
kinematics: cartesian
#   This option must be "cartesian" for cartesian printers.
max_velocity: 300
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
max_accel: 1500
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
max_z_velocity: 5
#   For cartesian printers this sets the maximum velocity (in mm/s) of
#   movement along the z axis. This setting can be used to restrict
#   the maximum speed of the z stepper motor on cartesian
#   printers. The default is to use max_velocity for max_z_velocity.
max_z_accel: 100
#   For cartesian printers this sets the maximum acceleration (in
#   mm/s^2) of movement along the z axis. It limits the acceleration
#   of the z stepper motor on cartesian printers. The default is to
#   use max_accel for max_z_accel.
#square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.


# Looking for more options? Check the example-extras.cfg file.

# Ender 3 stock display plugs in to the EXP1 port
[display]
lcd_type: st7920
encoder_pins: ^P1.20, ^P1.18
click_pin: ^!P0.28
cs_pin: P1.22
sid_pin: P1.23
sclk_pin: P1.21

# Custom definition to make the beeper work
[output_pin beeper]
pin: P1.30
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1000

# Custom GCode macro to make M300 use the beeper that you just defined
[gcode_macro M300]
default_parameter_S: 1000
default_parameter_P: 100
gcode:
	SET_PIN PIN=beeper VALUE={S}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0

# BLTouch V3 (original) running in open drain mode
# SKR 1.3 reference: https://github.com/bigtreetech/BIGTREETECH-SKR-V1.3/blob/master/hardware/SKR-V1.3-PIN.pdf
# BLTouch 3.0 reference: https://docs.wixstatic.com/ugd/f5a1c8_26f2661f0a4542eaacc1586eba8842e7.pdf
# According to this, when the USB is facing towards you, servo pins should be (left to right) colored red (power)-brown (ground)-orange (control pin)
# and the Zmin plug should be (top to bottom) power pin (leave empty), black wire (ground), white wire (sensor pin).

[bltouch]
sensor_pin: ^P1.25   # Pull-up (^ symbol) needed in open drain mode
control_pin: P2.0
# Some BLTouch V3 and many clones apparently require this, though mine didnt:
#pin_up_touch_mode_reports_triggered: False
x_offset: -44
y_offset: -14
#z_offset: 1.05
speed: 3.0
samples: 3

# Z-safe homing that (1) moves the probe up 15mm (2) home XY (3) move to center of bed (4) home Z
# Edit the X166 Y120 for your own center of bed
[homing_override]
axes: z
gcode:
    G90
    G1 Z15
    G28 X Y
    G1 X166 Y120 F6000
    G28 Z
set_position_z: 0.0

# This adds a bed mesh calibrate GCode
[bed_mesh]
speed: 250
horizontal_move_z: 10
min_point: 50,30
max_point: 210,210
probe_count: 3,3

# Custom G29 that does (1) home all (2) get bed mesh (3) move nozzle to corner so it doesnt ooze on the bed while heating up.
[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X10 Y10 Z10 F6000

# This adds a screw tilt adjust command that probes certain points on the bed and recommends new bed screw positions (turn clockwise this much etc)
[screws_tilt_adjust]
screw1: 50,50
screw1_name: Front left screw
screw2: 50,215
screw2_name: Rear left screw
screw3: 215,50
screw3_name: Front right screw
screw4: 215,215
screw4_name: Rear right screw
horizontal_move_z: 10
speed: 250
screw_thread: CW-M3

# Filament switch sensor made out of the leftover Z-stop after BLTouch install
# Wired to X-max stop but you can pick any pin you want.
[filament_switch_sensor filament_sensor]
pause_on_runout: True
switch_pin: ^!P1.28

# These two add power supply control G-Code support.
# Octoprint 'PSU control' and 'Action commands' plugins used for this.
# My PSU is connected to a relay, and the relay is connected to a Raspberry Pi GPIO pin.
[gcode_macro M80]
gcode:
    RESPOND TYPE=command MSG=action:poweron
    G4 P1500
    FIRMWARE_RESTART

[gcode_macro M81]
gcode:
    RESPOND TYPE=command MSG=action:poweroff

[gcode_macro M108]
gcode:
    TURN_OFF_HEATERS

# This adds a bed screws adjust GCode, that moves the nozzle around for you so you can paper adjust.
[bed_screws]
screw1: 31,37
screw1_name: Front left screw
screw2: 31,208
screw2_name: Rear left screw
screw3: 201,208
screw3_name: Rear right screw
screw4: 201,37
screw4_name: Front right screw

# This adds pause/resume support
[pause_resume]

# This adds the 'respond' G-Code that you can use to send commands back to OctoPrint
[respond]
default_type: echo

# This enables a 'force_move' command ignoring all homing, Z-stops etc. Useful in debugging.
[force_move]
enable_force_move: True

# The following section is to add a 'Calibration' menu item that allows easy access to many calibration settings

# Overwrite the main menu, add a 'power off' item and a 'calibration' submenu
[menu __main]
type: list
name: Main Menu
items:
    __command_power_off
    __tune
    __octoprint
    __sdcard
    __control
    __calibration
    __temp
    __filament
    __prepare
    __test

# This sends a power off command to Octoprint that gets picked up by the 'action commands' plug in
[menu __command_power_off]
type: command
name: Power off
gcode: RESPOND TYPE=command MSG=action:poweroff

[menu __calibration]
type: list
name: Calibration
items:
    __calibration_home_all_axes
    __calibration_bed_screws_adjust
    __calibration_bed_mesh_calibrate
    __calibration_screws_calculate
    __calibration_probe_calibrate
    __calibration_probe_accuracy
    __general_firmware_restart

[menu __calibration_accept]
type: command
name: Accept
gcode: ACCEPT

[menu __calibration_abort]
type: command
name: Abort
gcode: ABORT
action: back

[menu __calibration_screws_calculate]
type: command
name: Screw tilt calculate
gcode:
    G28
    SCREWS_TILT_CALCULATE

[menu __calibration_bed_screws_adjust]
type: list
name: Adjust screws
enter_gcode:
    G28
    BED_SCREWS_ADJUST
show_back: False
items:
    __calibration_accept
    __calibration_bed_screws_adjust_adjusted
    __calibration_save_config
    __calibration_abort

[menu __calibration_probe_accuracy]
type: command
name: Test accuracy
gcode:
    G28
    G0 X164 Y134 Z10 F6000
    PROBE_ACCURACY

[menu __calibration_save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __general_firmware_restart]
type: command
name: Restart firmware
gcode: FIRMWARE_RESTART

[menu __calibration_home_all_axes]
type: command
name: Home XYZ
gcode: G28

[menu __calibration_bed_screws_adjust_adjusted]
type: command
name: Adjusted
gcode: ADJUSTED

[menu __calibration_probe_calibrate]
type: list
show_back: False
name: Adjust Z offset
enter_gcode:
    G28
    G0 Z10 F6000
    PROBE_CALIBRATE
items:
    __calibration__toolhead_zpos
    __calibration_probe_calibrate_testz_minus, __calibration_probe_calibrate_testz_plus
    __calibration_probe_calibrate_testz_minus_minus, __calibration_probe_calibrate_testz_plus_plus
    __calibration_probe_calibrate_testz_minus_1, __calibration_probe_calibrate_testz_plus_1
    __calibration_probe_calibrate_testz_minus_point_1, __calibration_probe_calibrate_testz_plus_point_1
    __calibration_accept
    __calibration_save_config
    __calibration_abort

[menu __calibration__toolhead_zpos]
type: item
width: 16
name: "Z = {0:.3f}"
cursor: \x20
parameter: toolhead.zpos

[menu __calibration_probe_calibrate_testz_minus]
cursor: \x20
type: command
width: 7
name: "   -"
gcode: TESTZ Z=-

[menu __calibration_probe_calibrate_testz_plus]
cursor: \x20
type: command
name: "   +"
width: 7
gcode: TESTZ Z=+

[menu __calibration_probe_calibrate_testz_minus_minus]
cursor: \x20
type: command
name: "   --"
width: 7
gcode: TESTZ Z=--

[menu __calibration_probe_calibrate_testz_plus_plus]
cursor: \x20
type: command
name: "   ++"
width: 7
gcode: TESTZ Z=++

[menu __calibration_probe_calibrate_testz_minus_1]
cursor: \x20
type: command
name: "  -1.0"
width: 7
gcode: TESTZ Z=-1

[menu __calibration_probe_calibrate_testz_plus_1]
cursor: \x20
type: command
name: "  +1.0"
width: 7
gcode: TESTZ Z=+1

[menu __calibration_probe_calibrate_testz_minus_point_1]
cursor: \x20
type: command
name: "  -0.1"
width: 7
gcode: TESTZ Z=-0.1

[menu __calibration_probe_calibrate_testz_plus_point_1]
cursor: \x20
type: command
name: "  +0.1"
width: 7
gcode: TESTZ Z=+0.1

[menu __calibration_bed_mesh_calibrate]
type: deck
name: Generate bed mesh
width: 18
show_back: False
enter_gcode:
    G28
    BED_MESH_CALIBRATE
    SAVE_CONFIG
items:
    __calibration_card_bed_mesh

[menu __calibration_card_bed_mesh]
type: card
name: Calibration card
content:
    "{0}"
    ""
    "   Will reboot"
    "  when complete"
items:
    __calibration_bed_mesh_calibrate_text_1

[menu __calibration_bed_mesh_calibrate_text_1]
type: item
name: "  [In progress]"
cursor: \x20

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 23.975
#*# pid_ki = 0.951
#*# pid_kd = 151.044
#*#
#*# [bed_mesh default]
#*# points =
#*# 	0.033333, 0.037500, 0.048333
#*# 	-0.007500, 0.001667, 0.037500
#*# 	0.093333, 0.058333, 0.071667
#*# x_count = 3
#*# y_count = 3
#*# min_x = 50.0
#*# max_x = 210.0
#*# min_y = 30.0
#*# max_y = 210.0
#*# x_offset = -44.0
#*# y_offset = -14.0
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*#
#*# [bltouch]
#*# z_offset = 1.32
